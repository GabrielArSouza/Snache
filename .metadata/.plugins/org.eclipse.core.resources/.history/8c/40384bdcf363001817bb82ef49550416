package presentation;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;

import javax.swing.JFrame;

import io.UserInput;

// TODO: Auto-generated Javadoc
/**
 * View for showing the entire board.
 */
public class FrmBoard extends JFrame
{
	/** Class ID for serialization purposes. */
	private static final long serialVersionUID = -206230284397533789L;

	/**
	 * The main layout of the view. GridLayout is used because the board is
	 * matrix-like
	 */
	private GridLayout layout;

	/** Matrix of pieces. */
	private FrmBoardPiece frmBoardPieces[][];

	/** The width. */
	private int width;

	/** The height. */
	private int height;

	/**
	 * Instantiates a new frm board.
	 *
	 * @param height
	 *            the height
	 * @param width
	 *            the width
	 */
	public FrmBoard(int height, int width)
	{
		this(height, width, 10);
	}

	/**
	 * Instantiates a new frm board.
	 *
	 * @param height
	 *            the height
	 * @param width
	 *            the width
	 * @param pieceSize
	 *            the piece size
	 */
	public FrmBoard(int height, int width, int pieceSize)
	{
		this.width = width;
		this.height = height;
		this.setPreferredSize(new Dimension(height * pieceSize, width * pieceSize));
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.addKeyListener(new UserInput());
		this.setFocusable(true);

		layout = new GridLayout(height, width);
		this.setLayout(layout);

		frmBoardPieces = new FrmBoardPiece[height][width];
		initPieces();

		this.pack();
		this.setLocationRelativeTo(null);
	}

	/**
	 * Inits the pieces.
	 */
	private void initPieces()
	{
		for(int i = 0; i < height; ++i)
		{
			for(int j = 0; j < width; ++j)
			{
				frmBoardPieces[i][j] = new FrmBoardPiece(Color.WHITE);
				this.add(frmBoardPieces[i][j]);
			}
		}
	}

	/**
	 * Sets the color at.
	 *
	 * @param x
	 *            the x
	 * @param y
	 *            the y
	 * @param color
	 *            the color
	 */
	public void setColorAt(int x, int y, Color color)
	{
		frmBoardPieces[x][y].setColor(color);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.awt.Component#isFocusable()
	 */
	public boolean isFocusable()
	{
		return true;
	}

	/**
	 * Clear board.
	 */
	public void clearBoard()
	{
		for(int i = 0; i < this.height; i++)
		{
			for(int j = 0; j < this.width; j++)
			{
				frmBoardPieces[i][j].setColor(Color.WHITE);
			}
		}
	}
}
