package controller;

import java.awt.Color;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Stack;

import domain.Board;
import domain.BoardPiece;
import domain.Snake;
import domain.SnakeConstants;
import domain.SnakePiece;
import presentation.FrmBoard;

public class BoardController
{
	private FrmBoard frmBoard;
	private Board board;
	private Stack<Color> availableColors;
	
	public BoardController(FrmBoard frmBoard, Board board)
	{
		this.frmBoard = frmBoard;
		this.board = board;
		this.availableColors = new Stack<Color>();
		resetAvailableColors();
	}
	
	private void resetAvailableColors()
	{
		List<Color> allColors = Arrays.asList(SnakeConstants.COLORS);
		Collections.shuffle(allColors);
		availableColors.addAll(allColors);
	}
	
	private Color getColor()
	{
		Color color = availableColors.pop();
		
		if(availableColors.empty())
			resetAvailableColors();
		
		return color;
	}
	
	public void drawSnake(Snake snake)
	{
		SnakePiece head = snake.getHead();
		Color color = getColor();
		
		frmBoard.setColorAt(head.getRow(), head.getColumn(), color);
		
		for(SnakePiece piece : snake.getBody())
		{
			frmBoard.setColorAt(piece.getRow(), piece.getColumn(), color);
		}
	}
	
	public Snake createSnake()
	{
		EnumSnakeDirection direction = null;
		SnakePiece headPiece;
		
		// try to find a free vertical space
		BoardPiece columnTopEdge = board.getAvailableColumn(SnakeConstants.STANDARD_BODY_SIZE+1);
		
		// there's available space for a vertical snake
		if(columnTopEdge != null)
		{
			// decides the position of the head
			if(columnTopEdge < board.getHeight() / 2)
				headPiece = 
			
			else
				
				
			// the snake should'nt be born upwards if its head is in the top border
			// of the board. otherwise, it would die instantly
			if(headPiece.getRow() == 0)
			{
				// born downwards!
				direction = EnumSnakeDirection.DOWN;
			}
			
			else
			{
				direction = EnumSnakeDirection.UP;
			}
		}
		
		// no available space for a vertical snake
		else
		{
			// try do draw a horizontal snake
			headPiece = board.getAvailableRow(SnakeConstants.STANDARD_BODY_SIZE+1);
			
			// there's available space for a horizontal snake
			if(headPiece != null)
			{
				// the snake should'nt be born leftwards if its head is in the left border
				// of the board. otherwise, it would die instantly
				if(headPiece.getColumn() == 0)
				{
					// born rightwards!
					direction = EnumSnakeDirection.RIGHT;
				}
				
				else
				{
					direction = EnumSnakeDirection.LEFT;
				}
			}
		}
		
		System.out.println("new snake: " + headPiece.getRow() + " " + headPiece.getColumn() + " " + direction);
		
		if(direction == null)
			return null;
		
		else
			return new Snake(headPiece.getRow(), headPiece.getColumn(), SnakeConstants.STANDARD_BODY_SIZE, direction);
	}
}
